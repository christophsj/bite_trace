type DiaryEntry @model @auth(rules: [{ allow: public }]) {
  day: String!
  meals: [Meal!]
  goals: NutrientGoals
  id: ID! @primaryKey(sortKeyFields: ["day"])
}

type AccountData @model @auth(rules: [{ allow: public }]) {
  id: ID! @primaryKey
  nutrientGoal: NutrientGoal!
  mealNames: [String!]
  themeModeIdx: Int
  themeColorIdx: Int
  name: String!
  friends: [String!]
  food: [MyFood!] @hasMany
  meals: [MyMeal!] @hasMany
}

type MyFood @model @auth(rules: [{ allow: public }]) {
  food: Food!
}

type MyMeal @model @auth(rules: [{ allow: public }]) {
  name: String!
  foods: [Food!]!
}


type NutrientGoal {
  isDaily: Boolean!
  daily: NutrientGoals!
  weekly: [NutrientGoalsConfig!]!
  setAt: AWSDate
}

type NutrientGoalsConfig {
  name: String!
  days: [Int!]
  goals: NutrientGoals!
}

type NutrientGoals {
  calories: Int!
  carbPerc: Int!
  fatPerc: Int!
  proteinPerc: Int!
  otherNutrients: Nutrients
  setAt: AWSDate
}

type Meal {
  name: String!
  index: Int!
  foods: [Food!]!
}

type Food {
  countryCode: String
  description: String!
  foodId: String!
  chosenServingSize: Int!
  chosenServingAmount: Float!
  verified: Boolean!
  brandName: String
  nutritionalContents: Nutrients!
  servingSizes: [ServingSize!]!
  imageUrl: String
}

type ServingSize {
  index: Int!
  nutritionMultiplier: Float!
  unit: String!
  value: Float!
}

type Nutrients {
  calories: Float!
  carbohydrates: Float!
  protein: Float!
  fat: Float!
  calcium: Float
  cholesterol: Float
  fiber: Float
  iron: Float
  monounsaturatedFat: Float
  polyunsaturatedFat: Float
  potassium: Float
  saturatedFat: Float
  sodium: Float
  sugar: Float
  vitaminC: Float
  vitaminD: Float
  transFat: Float
  vitaminA: Float
  vitaminE: Float
  vitaminB1: Float
  vitaminB2: Float
  vitaminPP: Float
  vitaminB6: Float
  vitaminB12: Float
  vitaminB9: Float
  vitaminK: Float
}